name: Deploy to EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect project directories
        id: detect
        run: |
          set -e
          echo "Workspace contents:" && ls -la
          # Detect server dir
          if [ -d server ]; then echo "SERVER_DIR=server" >> $GITHUB_ENV; SRCDIR=server; \
          elif [ -d Server ]; then echo "SERVER_DIR=Server" >> $GITHUB_ENV; SRCDIR=Server; \
          else echo "No server directory found" && exit 1; fi
          # Detect client dir
          if [ -d client ]; then echo "CLIENT_DIR=client" >> $GITHUB_ENV; \
          elif [ -d Client ]; then echo "CLIENT_DIR=Client" >> $GITHUB_ENV; \
          else echo "No client directory found" && exit 1; fi

      - name: Setup Node for client build
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Build client
        run: |
          npm ci --ignore-scripts
          npm run build
        working-directory: ${{ env.CLIENT_DIR }}

      - name: Prepare deploy artifacts
        run: |
          set -e
          mkdir -p deploy/${{ env.CLIENT_DIR }} deploy/${{ env.SERVER_DIR }}
          # Copy client runtime artifacts
          cp -r ${{ env.CLIENT_DIR }}/.next deploy/${{ env.CLIENT_DIR }}/.next
          cp ${{ env.CLIENT_DIR }}/package.json deploy/${{ env.CLIENT_DIR }}/package.json
          cp ${{ env.CLIENT_DIR }}/package-lock.json deploy/${{ env.CLIENT_DIR }}/package-lock.json || true
          [ -f ${{ env.CLIENT_DIR }}/next.config.ts ] && cp ${{ env.CLIENT_DIR }}/next.config.ts deploy/${{ env.CLIENT_DIR }}/ || true
          [ -f ${{ env.CLIENT_DIR }}/next.config.js ] && cp ${{ env.CLIENT_DIR }}/next.config.js deploy/${{ env.CLIENT_DIR }}/ || true
          # Copy server excluding node_modules
          rsync -az --delete --exclude=node_modules ${{ env.SERVER_DIR }}/ deploy/${{ env.SERVER_DIR }}/
          # Create tarball
          tar -czf deploy_artifacts.tar.gz -C deploy .

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_KEY }}

      - name: Copy files to EC2
        run: |
          rsync -e "ssh -o StrictHostKeyChecking=no" -az --delete \
            deploy_artifacts.tar.gz \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:${{ secrets.EC2_APP_DIR }}/

      - name: Deploy on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          set -e
          EC2_APP_DIR="${EC2_APP_DIR}"
          SERVER_DIR="${{ env.SERVER_DIR }}"
          cd ${EC2_APP_DIR}
          tar -xzf deploy_artifacts.tar.gz

          # Server env expected in a .env file on EC2
          cd ${SERVER_DIR}
          # Install prod deps without running postinstall migrations during install
          npm ci --omit=dev --ignore-scripts

          # Restart server using PM2 (install if missing)
          if ! command -v pm2 >/dev/null 2>&1; then
            sudo npm i -g pm2
          fi

          # Create or reload PM2 process
          APP_NAME=law-firm-server
          pm2 startOrReload <<PM2CONF
          {
            "apps": [
              {
                "name": "${APP_NAME}",
                "script": "src/app.js",
                "cwd": "${EC2_APP_DIR}/${SERVER_DIR}",
                "env": { "NODE_ENV": "production", "PORT": "4000" }
              }
            ]
          }
          PM2CONF

          pm2 save
          pm2 status | sed -n '1,200p'
          EOF
